# Generated by Django 5.1.5 on 2025-06-14 16:19

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Author's full name", max_length=200)),
                ('biography', models.TextField(blank=True, help_text="Author's biography", null=True)),
                ('birth_date', models.DateField(blank=True, help_text="Author's birth date", null=True)),
                ('death_date', models.DateField(blank=True, help_text="Author's death date (if applicable)", null=True)),
                ('nationality', models.CharField(blank=True, help_text="Author's nationality", max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when author was added')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when author was last updated')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_aut_name_b2f398_idx'), models.Index(fields=['nationality'], name='library_aut_nationa_d0c444_idx')],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (must be unique)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the category', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when category was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when category was last updated')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_cat_name_9e55d3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_id', models.CharField(blank=True, help_text='Unique library member ID (e.g., LIB2024001)', max_length=20, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number (9-15 digits)', regex='^\\+?1?\\d{9,15}$')])),
                ('alternate_phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number (9-15 digits)', regex='^\\+?1?\\d{9,15}$')])),
                ('address_line1', models.CharField(blank=True, max_length=200, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state_province', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(default='Nepal', max_length=100)),
                ('membership_type', models.CharField(choices=[('STUDENT', 'Student'), ('STAFF', 'Staff'), ('GENERAL', 'General Public')], default='GENERAL', max_length=20)),
                ('membership_date', models.DateField(auto_now_add=True)),
                ('membership_expiry', models.DateField(blank=True, help_text='Membership expiration date', null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('EXPIRED', 'Expired')], default='ACTIVE', max_length=20)),
                ('max_books_allowed', models.PositiveIntegerField(default=3, help_text='Maximum number of books this member can borrow', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_days_allowed', models.PositiveIntegerField(default=14, help_text='Maximum days to keep borrowed books', validators=[django.core.validators.MinValueValidator(1)])),
                ('security_deposit', models.DecimalField(decimal_places=2, default=0.0, help_text='Security deposit paid by member', max_digits=8)),
                ('outstanding_fines', models.DecimalField(decimal_places=2, default=0.0, help_text='Total unpaid fines', max_digits=8)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('institution', models.CharField(blank=True, help_text='School/College/Organization name', max_length=200, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number', regex='^\\+?1?\\d{9,15}$')])),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this member', null=True)),
                ('user', models.OneToOneField(blank=True, help_text='Associated user account', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Library Member',
                'verbose_name_plural': 'Library Members',
                'ordering': ['user__last_name', 'user__first_name', 'member_id'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Publisher's name", max_length=200)),
                ('address', models.TextField(blank=True, help_text="Publisher's address", null=True)),
                ('website', models.URLField(blank=True, help_text="Publisher's website URL", null=True)),
                ('contact_email', models.EmailField(blank=True, help_text="Publisher's contact email", max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text="Publisher's phone number", max_length=20, null=True)),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the publisher was established', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when publisher was added')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when publisher was last updated')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_pub_name_d0230a_idx')],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Book title', max_length=300)),
                ('subtitle', models.CharField(blank=True, help_text='Book subtitle (optional)', max_length=300, null=True)),
                ('isbn', models.CharField(blank=True, help_text='ISBN-10 or ISBN-13 format (optional for migration)', max_length=17, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid ISBN-10 or ISBN-13', regex='^(\\d{10}|\\d{13}|97[89]\\d{10}|\\d{1,5}-\\d{1,7}-\\d{1,7}-[\\dX])$')])),
                ('publication_date', models.DateField(blank=True, help_text='Date when book was published', null=True)),
                ('edition', models.CharField(blank=True, help_text='Book edition (e.g., "1st Edition", "Revised")', max_length=50, null=True)),
                ('pages', models.PositiveIntegerField(blank=True, help_text='Number of pages', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('language', models.CharField(choices=[('EN', 'English'), ('NE', 'Nepali'), ('HI', 'Hindi'), ('FR', 'French'), ('ES', 'Spanish'), ('DE', 'German'), ('OTHER', 'Other')], default='EN', help_text='Book language', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Brief description of the book', null=True)),
                ('keywords', models.CharField(blank=True, help_text='Comma-separated keywords', max_length=500, null=True)),
                ('total_copies', models.PositiveIntegerField(default=1, help_text='Total number of copies owned', validators=[django.core.validators.MinValueValidator(1)])),
                ('available_copies', models.PositiveIntegerField(default=1, help_text='Number of copies available for borrowing', validators=[django.core.validators.MinValueValidator(0)])),
                ('condition', models.CharField(choices=[('NEW', 'New'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('DAMAGED', 'Damaged')], default='GOOD', help_text='Physical condition of the book', max_length=10)),
                ('location', models.CharField(blank=True, help_text='Shelf location (e.g., A-12-3)', max_length=100, null=True)),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price paid for the book', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('purchase_date', models.DateField(blank=True, help_text='Date when book was purchased', null=True)),
                ('added_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when book was added to system')),
                ('updated_date', models.DateTimeField(auto_now=True, help_text='Date and time when book was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to remove from circulation')),
                ('barcode', models.CharField(blank=True, help_text='Library barcode for the book', max_length=50, null=True, unique=True)),
                ('acquisition_method', models.CharField(choices=[('PURCHASE', 'Purchase'), ('DONATION', 'Donation'), ('EXCHANGE', 'Exchange'), ('OTHER', 'Other')], default='PURCHASE', help_text='How the book was acquired', max_length=20)),
                ('authors', models.ManyToManyField(blank=True, help_text='Book authors', related_name='books', to='library.author')),
                ('category', models.ForeignKey(blank=True, help_text='Book category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='library.category')),
                ('publisher', models.ForeignKey(blank=True, help_text='Book publisher', null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.publisher')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['title', 'publication_date'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(blank=True, help_text='Unique transaction ID (auto-generated)', max_length=20, null=True, unique=True)),
                ('borrow_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateField(blank=True, help_text='Date when book should be returned', null=True)),
                ('return_date', models.DateField(blank=True, help_text='Actual return date (null if not returned)', null=True)),
                ('status', models.CharField(choices=[('BORROWED', 'Borrowed'), ('RETURNED', 'Returned'), ('OVERDUE', 'Overdue'), ('LOST', 'Lost')], default='BORROWED', max_length=20)),
                ('renewal_count', models.PositiveIntegerField(default=0, help_text='Number of times this transaction has been renewed')),
                ('max_renewals_allowed', models.PositiveIntegerField(default=2, help_text='Maximum renewals allowed for this transaction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this transaction', null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='library.book')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='library.member')),
            ],
            options={
                'verbose_name': 'Book Transaction',
                'verbose_name_plural': 'Book Transactions',
                'ordering': ['-borrow_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fine_id', models.CharField(blank=True, db_index=True, help_text='Unique fine ID (auto-generated)', max_length=20, null=True, unique=True)),
                ('fine_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total fine amount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('reason', models.CharField(choices=[('OVERDUE', 'Overdue Return'), ('DAMAGE', 'Book Damage'), ('LOST', 'Lost Book'), ('OTHER', 'Other')], db_index=True, default='OVERDUE', max_length=20)),
                ('reason_description', models.TextField(blank=True, help_text='Detailed description of the fine reason', null=True)),
                ('status', models.CharField(choices=[('UNPAID', 'Unpaid'), ('PAID', 'Paid'), ('WAIVED', 'Waived'), ('PARTIAL', 'Partially Paid')], db_index=True, default='UNPAID', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fine_date', models.DateField(auto_now_add=True, db_index=True)),
                ('payment_date', models.DateField(blank=True, help_text='Date when fine was fully paid or waived', null=True)),
                ('due_date', models.DateField(blank=True, db_index=True, help_text='Date by which fine should be paid', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collected_by', models.CharField(blank=True, help_text='Staff member who collected the fine', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the fine', null=True)),
                ('waived_by', models.CharField(blank=True, help_text='Staff member who waived the fine', max_length=100, null=True)),
                ('waived_reason', models.TextField(blank=True, help_text='Reason for waiving the fine', null=True)),
                ('member', models.ForeignKey(blank=True, help_text='Member who owes the fine', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fines', to='library.member')),
                ('transaction', models.ForeignKey(blank=True, help_text='Related transaction (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fines', to='library.transaction')),
            ],
            options={
                'verbose_name': 'Library Fine',
                'verbose_name_plural': 'Library Fines',
                'ordering': ['-fine_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('copy_number', models.PositiveIntegerField(default=1)),
                ('condition', models.CharField(choices=[('NEW', 'New'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('DAMAGED', 'Damaged')], default='GOOD', max_length=10)),
                ('is_available', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='copies', to='library.book')),
            ],
            options={
                'verbose_name': 'Book Copy',
                'verbose_name_plural': 'Book Copies',
                'ordering': ['book', 'copy_number'],
                'unique_together': {('book', 'copy_number')},
            },
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['member_id'], name='library_mem_member__6d9f9d_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['phone'], name='library_mem_phone_18ccb0_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['membership_type'], name='library_mem_members_4d6ec2_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['status'], name='library_mem_status_3456f4_idx'),
        ),
        migrations.AddIndex(
            model_name='member',
            index=models.Index(fields=['membership_expiry'], name='library_mem_members_2c04bc_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='library_boo_title_c38ef2_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['isbn'], name='library_boo_isbn_951e8b_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['publication_date'], name='library_boo_publica_52192c_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['category'], name='library_boo_categor_8739d3_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_active'], name='library_boo_is_acti_aa8285_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['barcode'], name='library_boo_barcode_23072a_idx'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.CheckConstraint(condition=models.Q(('available_copies__lte', models.F('total_copies'))), name='available_copies_not_exceed_total'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.CheckConstraint(condition=models.Q(('total_copies__gte', 1)), name='total_copies_minimum_one'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_id'], name='library_tra_transac_fbb741_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['status'], name='library_tra_status_8e052c_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['due_date'], name='library_tra_due_dat_4b0d33_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['borrow_date'], name='library_tra_borrow__48614b_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['member', 'status'], name='library_tra_member__e63a99_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['fine_id'], name='library_fin_fine_id_765306_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['status'], name='library_fin_status_8c0a7a_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['fine_date'], name='library_fin_fine_da_d687ee_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['due_date'], name='library_fin_due_dat_59839b_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['member', 'status'], name='library_fin_member__8aebc7_idx'),
        ),
        migrations.AddIndex(
            model_name='fine',
            index=models.Index(fields=['reason'], name='library_fin_reason_12df6d_idx'),
        ),
        migrations.AddConstraint(
            model_name='fine',
            constraint=models.CheckConstraint(condition=models.Q(('amount_paid__lte', models.F('fine_amount'))), name='fine_amount_paid_not_exceed_fine_amount'),
        ),
        migrations.AddConstraint(
            model_name='fine',
            constraint=models.CheckConstraint(condition=models.Q(('fine_amount__gt', 0)), name='fine_amount_positive'),
        ),
    ]
